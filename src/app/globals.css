.post-lightbox-caption {
  color: #fff !important;
  margin-top: 0.75rem;
}
.post-lightbox-caption * {
  color: #fff !important;
}
body.lightbox-open * {
  cursor: url("data:image/svg+xml;utf8,<svg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 48 48'><rect x='22' y='6' width='4' height='36' fill='white' transform='rotate(45 24 24)'/><rect x='6' y='22' width='36' height='4' fill='white' transform='rotate(45 24 24)'/></svg>") 24 24, pointer !important;
}
:root {
  --background: #ffffff;
  --foreground: #171717;
  --font-monument: 'Monument Grotesk', system-ui, -apple-system, 'Segoe UI', Roboto, Arial;
  /* Design system spacing tokens (site-wide) */
  --space-0: 0px;
  --space-xs: 0.75rem; /* was 32px */
  --space-sm: 1.5rem;  /* was 64px */
  --space-md: 128px;
  --space-lg: 192px;
  --space-xl: 256px;
  /* Single gutter variable used by layout elements (nav, content padding) */
  --site-gutter: 2rem;
}

/* Mobile override: smaller gutters on narrow viewports */
@media (max-width: 640px) {
  :root {
    --site-gutter: 1rem;
  }
}

/* Dark mode removed: site uses the light color variables defined in :root */

html,
body {
  max-width: 100vw;
  overflow-x: hidden;
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: var(--font-monument);
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

/* Ensure headings don't inherit bold weight from the font - keep them normal */
h1, h2, h3, h4, h5, h6, .post-title, .post-author {
  font-weight: 400;
  font-weight: normal;
}

* {
  box-sizing: border-box;
  padding: 0;
  margin: 0;
}

a {
  color: inherit;
  text-decoration: none;
}

/* color-scheme forced to default (no dark mode) */

/* Post page styles moved from inline styles */
.post-page {
  position: relative;
  padding: 0;
  min-height: 100vh;
  display: flex;
  align-items: center; /* vertically center the content in the viewport */
  justify-content: center;
  flex-direction: row;
}

@media (max-width: 768px) {
  .post-page {
    padding: 0;
  }
}

.post-transition-img {
  position: fixed;
  top: 50%;
  left: 50%;
  width: auto;
  height: 80vh;
  transform: translate(-50%, -50%) scale(1);
  z-index: 1000;
  display: none;
}

.post-content {
  opacity: 0;
  transition: opacity 0.2s ease-in-out;
  /* allow the content container to span the full viewport so internal
     sections (like the full-bleed header and the centered post-body) can
     position independently */
  width: 100%;
  max-width: none;
  margin: 10rem 0 5rem 0; /* top:10rem, right:0, bottom:5rem, left:0 */
}

.post-content.is-visible {
  opacity: 1;
}

.post-title {
  font-size: 7rem;
  line-height: .9;
}

.post-author {
  font-size: 7rem;
  margin-bottom: 0rem;
  opacity: 0.8;
  line-height: .9;
  color: grey;
}

.post-image {
  width: 100%;
  height: auto;
  margin-bottom: 2rem;
  border-radius: 0;
}

/* make the header image full-bleed across the viewport while inside the centered container */
.post-image-header {
  width: 100vw;
  max-width: 100vw;
  height: auto;
  display: block;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  margin-bottom: 2rem;
  object-fit: cover;
}

/* header row: metadata and header image side-by-side on wide screens */
.post-header {
  width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-bottom: 2rem;
}

.post-meta-row {
  display: flex;
  width: 100%;
  /* stack title and author vertically and center them */
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: var(--site-gutter) var(--site-gutter);
  box-sizing: border-box;
  text-align: center;
}

/* constrain title/author width and center text when stacked */
.post-meta-row .post-title,
.post-meta-row .post-author {
  max-width: 1000px;
  width: 100%;
  box-sizing: border-box;
  overflow-wrap: break-word;
  word-break: break-word;
  hyphens: auto;
  text-align: center;
}

/* when image is part of header-row, occupy half the row and sit on the left */
.post-header-image {
  /* full-bleed across the viewport */
  width: 100vw;
  max-width: 100vw;
  height: auto;
  max-height: 90vh;
  display: block;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  object-fit: cover;
  object-position: center;
  border-radius: 0;
}

@media (max-width: 768px) {
  .post-header {
    margin-left: 0;
  }
  .post-header-image {
    width: 100%;
    max-width: 100%;
    margin-left: 0;
    margin-right: 0;
  }
  .post-meta-row {
    flex-direction: column;
    align-items: center;
    gap: 0.5rem;
  }
  .post-meta-row .post-title,
  .post-meta-row .post-author {
    max-width: 100%;
    text-align: center;
    font-size: 3.5rem;
    line-height: .9;
  }
  /* Prevent author names from being hyphenated on small screens; force
     wrapping only at whitespace so a long last name moves to the next line. */
  .post-meta-row .post-author,
  .post-author {
    hyphens: none;
    word-break: normal;
    overflow-wrap: normal;
  }
}

/* Post body centered single column */
.post-body {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 4rem;
  padding: 0 var(--site-gutter);
  font-size: 1.25rem;
}

@media (max-width: 768px) {
  .post-body {
    max-width: 100%;
    margin-left: var(--site-gutter);
    margin-right: var(--site-gutter);
    padding: 0;
    /* width: 100%; removed as requested */
  }
}

/* Main image figure that follows the same column constraints as .post-body */
.post-main-figure {
  /* full-bleed image area while caption below stays constrained */
  width: 100vw;
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  margin-top: 2rem;
  padding: 0;
  box-sizing: border-box;
}

.post-main-image {
  /* make the header/main image full-bleed */
  width: 100vw;
  max-width: 100vw;
  height: auto;
  display: block;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  object-fit: cover;
  object-position: center;
  max-height: 90vh;
  border-radius: 0;
}

/* blur-up / LQIP support: use background-image for tiny placeholder and fade/scale the real image in */
.post-main-image.not-loaded {
  /* Keep a static LQIP placeholder but do not animate transform or opacity */
  filter: blur(8px) saturate(0.9);
  transform: none;
  transition: none;
}
.post-main-image.is-loaded {
  filter: none;
  transform: none;
  transition: none;
}

/* Lightbox overlay */
.post-lightbox-overlay {
  position: fixed;
  inset: 0;
  display: flex;
  align-items: center;
  justify-content: center;
  background: rgba(0,0,0,0.85);
  /* sit above other fixed chrome (NavBar uses a very large z-index) */
  z-index: 2147483650;
  padding: 2rem;
}
.post-lightbox-overlay {
  /* rotated plus cursor (X) - shown when the lightbox overlay is active */
  cursor: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 48 48'%3E%3Crect x='22' y='6' width='4' height='36' fill='white' transform='rotate(45 24 24)'/%3E%3Crect x='6' y='22' width='36' height='4' fill='white' transform='rotate(45 24 24)'/%3E%3C/svg%3E") 24 24, pointer;
}

/* show a plus cursor on clickable images (indicates image will open a lightbox) */
img[role="button"] {
  cursor: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 48 48'%3E%3Crect x='22' y='6' width='4' height='36' fill='white'/%3E%3Crect x='6' y='22' width='36' height='4' fill='white'/%3E%3C/svg%3E") 24 24, pointer;
}

/* Carousel side-image custom cursors (use public/cursors/*.svg)
   More specific selector targets interactive images and includes a compact inline
   fallback. The !important is applied to the property so it overrides other rules. */
.post-carousel-slide-3d.is-prev img[role="button"] {
  /* use small 48x48 PNG cursor for reliable browser support; enforce with !important */
  cursor: url('/cursors/left-48.png') 24 24, url('/cursors/left.png') 24 24, url('/cursors/left.svg?v=2') 24 24, w-resize !important;
}
.post-carousel-slide-3d.is-next img[role="button"] {
  /* use small 48x48 PNG cursor for reliable browser support; enforce with !important */
  cursor: url('/cursors/right-48.png') 24 24, url('/cursors/right.png') 24 24, url('/cursors/right.svg?v=2') 24 24, e-resize !important;
}

/* Also apply cursor to the slide container itself so hovering the side area (not only the image) shows the cursor */
.post-carousel-slide-3d.is-prev {
  cursor: url('/cursors/left-48.png') 24 24, url('/cursors/left.png') 24 24, url('/cursors/left.svg?v=2') 24 24, w-resize !important;
}
.post-carousel-slide-3d.is-next {
  cursor: url('/cursors/right-48.png') 24 24, url('/cursors/right.png') 24 24, url('/cursors/right.svg?v=2') 24 24, e-resize !important;
}

/* Visual plus overlay on image wrappers (figures) that rotates into an X when lightbox is open.
   Pseudo-elements don't work reliably on replaced elements like <img>, so we render
   the plus on the figure wrapper which supports ::after. */

/* Also ensure the overlay cursor is available immediately by matching body cursor when open */
body.lightbox-open {
  /* rotated plus cursor (X) used as the page cursor while lightbox is open */
  cursor: url("data:image/svg+xml;utf8,%3Csvg xmlns='http://www.w3.org/2000/svg' width='48' height='48' viewBox='0 0 48 48'%3E%3Crect x='22' y='6' width='4' height='36' fill='white' transform='rotate(45 24 24)'/%3E%3Crect x='6' y='22' width='36' height='4' fill='white' transform='rotate(45 24 24)'/%3E%3C/svg%3E") 24 24, pointer;
}

/* keep the inner image area using default cursor so users can interact (e.g. drag/select)
   but the overlay (click-to-close) shows the X cursor */

.post-lightbox-inner {
  max-width: 95vw;
  max-height: 95vh;
  position: relative;
  display: flex;
  flex-direction: column;
  align-items: center;
}
.post-lightbox-image {
  max-width: 100%;
  max-height: 80vh;
  object-fit: contain;
  text-align: center;
}
.post-lightbox-close {
  position: fixed;
  right: var(--site-gutter);
  top: 0.5rem;
  padding: 0 var(--site-gutter);
  color: #6b6b6b;
  font-size: 0.95rem;
  line-height: 1.25;
}

.post-body :where(p, h2, h3, ul, ol, blockquote) {
  line-height: 1.2;
  margin-bottom: 1rem;
}

@media (max-width: 800px) {
  .post-body {
  margin-left: var(--site-gutter);
  margin-right: var(--site-gutter);
    max-width: 100%;
  }
  .post-main-figure {
    /* keep main figure full-bleed to viewport edges on small screens */
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
    max-width: 100%;
    box-sizing: border-box;
  }
    .post-main-caption,
  .post-body-caption {
    margin-left: var(--site-gutter);
    margin-right: var(--site-gutter);
    max-width: calc(100% - 2rem);
    padding: 0;
    text-align: left;
  }
  /* inline figures should not remain centered on mobile; make them consume
     the content width so images and captions align with the post text */
  .post-body-figure {
    max-width: 100%;
    margin-left: 0;
    margin-right: 0;
    padding: 0;
    box-sizing: border-box;
  }
  .post-body-figure > img {
    width: 100%;
    margin-left: 0;
    margin-right: 0;
    display: block;
  }
  /* Full-bleed figures: keep images edge-to-edge but remove desktop calc offsets
     so captions can align with the post column on small screens. */
  .post-body-figure.fullwidth,
  .post-body-image.fullwidth,
  .post-main-image {
    /* offset the full-bleed figures so their edges match the viewport */
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
    width: 100vw;
    max-width: 100vw;
    box-sizing: border-box;
  }
  /* Constrain captions for fullwidth images to the post gutters on mobile */
  .post-body-figure.fullwidth .post-body-caption,
  .post-main-figure .post-main-caption,
  .post-body-figure.fullwidth .post-body-caption :where(p) {
    margin-left: var(--site-gutter);
    margin-right: var(--site-gutter);
    max-width: calc(100% - 2rem);
    padding: 0;
    box-sizing: border-box;
    text-align: left;
  }
}

/* PortableText images */
.post-body-image {
  width: 100%;
  height: auto;
  display: block;
  /* keep top spacing from preceding content but let captions control the below spacing */
  margin: 1.5rem 0 0;
  border-radius: 0;
}

/* Inline blockContent figure/caption styling */

.post-body-figure {
  /* inline block images constrained to the post column.
     Use full post column width (up to 800px). Do not add extra inner
     horizontal padding here — captions and the post column control gutters. */
  width: 100%;
  max-width: 800px;
  margin: 1.5rem 0;
  padding: 0;
  box-sizing: border-box;
}

/* full-bleed variant for occasional breakout images in PortableText */
.post-body-figure.fullwidth {
  width: 100vw;
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  padding: 0;
}

.post-body-image.fullwidth {
  /* The parent figure (.post-body-figure.fullwidth) is positioned full-bleed
    (100vw and shifted with calc). The image itself should simply fill the
    figure's width so use width:100% and reset margins to avoid double offsets. */
  width: 100%;
  max-width: none;
  margin-left: 0;
  margin-right: 0;
  /* Keep the image's intrinsic aspect ratio and let its natural height
    determine the rendered height. This means exceptionally tall images
    will be tall on the page (not cropped via cover). */
  height: auto;
  max-height: none;
  display: block;
  object-position: center;
  border-radius: 0;
}

/* When editors choose "Full height (no crop)", show the full image instead of
   covering/cropping it. Use contain so the whole image is visible and center it
   within the viewport; constrain height so it doesn't overflow the viewport. */
.post-body-figure.fullwidth.fullheight {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  height: auto;
  /* Keep the figure full-bleed but provide visual gutters via padding. */
  padding: 0 10rem;
  box-sizing: border-box;
  overflow: visible;
}
.post-body-image.fullwidth.fullheight {
  /* Keep fullwidth+fullheight images full-bleed but respect their intrinsic
    height (width = 100vw; height = auto). This prevents cropping and lets
    very tall images render at their natural height while still touching
    the viewport edges. We keep the padding on the figure and use negative
    margins on the image to visually inset the subject when editors choose
    gutters. */
  width: 100vw;
  max-width: none;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  height: auto;
  max-height: none;
  display: block;
  object-fit: none;
  object-position: center top;
}

/* Ensure images with only `fullheight` (or fullheight + fullwidth) are
   displayed edge-to-edge horizontally. Some editor choices set fullHeight
   without also toggling fullWidth; this rule forces a full-bleed layout so
   the image doesn't remain centered in a narrow column. */
.post-body-figure.fullheight,
.post-body-figure.fullwidth.fullheight {
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  width: 100vw;
  padding-left: 0; /* remove inner gutters so image touches edges */
  padding-right: 0;
  box-sizing: border-box;
}
.post-body-figure.fullheight .post-body-image,
.post-body-image.fullheight {
  width: 100vw;
  max-width: none;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  display: block;
}

/* Wide margins inset: give 10rem gutters on both sides while keeping image centered. */
.post-body-figure.fullwidth.wide-margins {
  /* Keep the figure full-bleed while using the site gutter as the
     inner visual gutter so the image lines up with other content. */
  width: 100vw;
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  /* use the site-wide gutter so the inset matches other page elements */
  padding: 0 var(--site-gutter);
  box-sizing: border-box;
  overflow: visible;
}
/* Ensure the image inside a wide-margins fullwidth figure is inset by the
   figure's padding so the visual side gutters are respected. Use the site
   gutter variable so alignment is consistent across the site. */
.post-body-figure.fullwidth.wide-margins .post-body-image {
  /* Make the image fill the padded content area of the figure so the
    figure's padding (gutters) is the single source of horizontal spacing.
    Remove any explicit margins on the image to avoid doubling the space. */
  width: 100%;
  max-width: none;
  margin: 0;
  display: block;
  box-sizing: border-box;
}
.post-body-image.fullwidth.wide-margins {
  /* Keep wide-margins full-bleed but maintain intrinsic height. We use
    negative margins in the editor layout to create visual gutters while
    ensuring the image still spans the viewport. */
  width: 100vw;
  max-width: none;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  height: auto;
  max-height: none;
  display: block;
  object-position: center;
}

/* When fullheight + wide margins are used together, keep contain behavior
   but still offset the image so the visible edges touch the viewport. */
.post-body-image.fullwidth.wide-margins.fullheight {
  width: 100vw;
  max-width: none;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  height: auto;
  max-height: none;
  object-fit: none;
  object-position: center top;
}

/* Keep captions under fullwidth/fullheight images and constrained to the
   post column width so they don't float beside the image. */
.post-body-figure.fullwidth.fullheight .post-body-caption {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0.5rem;
  padding: 0 var(--site-gutter);
  color: #6b6b6b;
  font-size: 0.95rem;
  line-height: 1.25;
  text-align: left;
}

/* Ensure captions for fullwidth (non-fullheight) figures also align with
   the centered post column on desktop. Mobile rules (max-width:800px)
   will override these to use 1rem gutters via margins. */
.post-body-figure.fullwidth .post-body-caption,
.post-main-figure .post-main-caption {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0.5rem;
  padding: 0 var(--site-gutter);
  color: #6b6b6b;
  font-size: 0.95rem;
  line-height: 1.25;
  text-align: left;
  box-sizing: border-box;
}

/* Mobile-first override placed after the desktop rules so it wins the cascade.
   Ensure fullwidth image captions use the post gutters on small screens and
   remove any desktop padding that causes a left indent. */
@media (max-width: 800px) {
  .post-body-figure.fullwidth .post-body-caption,
  .post-body-figure.fullwidth.fullheight .post-body-caption,
  .post-main-figure .post-main-caption {
  margin-left: var(--site-gutter);
  margin-right: var(--site-gutter);
  max-width: calc(100% - (2 * var(--site-gutter)));
  padding: 0; /* remove the desktop `padding` that can persist in the cascade */
    box-sizing: border-box;
    text-align: left;
    color: #6b6b6b;
  }

  /* Ensure paragraphs inside captions don't reintroduce extra horizontal offsets */
  .post-body-figure.fullwidth .post-body-caption :where(p) {
    margin-left: 0;
    margin-right: 0;
  }
}


/* When an image is wrapped in a figure (has a caption), remove its own bottom margin
   so the caption's top margin is the single, predictable gap between image and caption. */
.post-body-figure > img,
.post-main-figure > img {
  /* Images inside figure should fill the figure's content area and have no
     extra margins so they line up with body text. */
  width: 100%;
  height: auto;
  display: block;
  margin: 0;
}

.post-body-caption {
  /* use the same caption styling as the main caption */
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0.5rem;
  padding: 0;
  color: #6b6b6b;
  font-size: 0.95rem;
  line-height: 1.25;
}

/* Make header/main image caption match inline image captions and align to post column */
.post-main-caption {
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
  margin-top: 0.5rem;
  padding: 0;
  color: #6b6b6b;
  font-size: 0.95rem;
  line-height: 1.25;
  text-align: left;
}

/* Remove extra paragraph margins inside PortableText captions */
.post-body-caption :where(p) {
  margin: 0;
  line-height: 1.25;
}

/* Footer styles */
.site-footer {
  width: 100%;
  padding: 0;
  display: block;
  background: var(--background);
  color: var(--foreground);
  /* make all footer text display bold */
  font-weight: 700;
}

/* Hide footer by default to avoid it flashing before client JS decides visibility.
   The layout will add the `footer-visible` class to <body> when the footer
   should be shown. */
.site-footer {
  opacity: 0;
  visibility: hidden;
  transform: translateY(8px);
  transition: opacity 320ms ease, transform 320ms ease, visibility 0s linear 320ms;
}
.footer-visible .site-footer {
  opacity: 1;
  visibility: visible;
  transform: translateY(0);
  transition-delay: 0s;
}

/* Strong fallback: ensure footer is not visible unless explicitly allowed.
   This uses high specificity and !important to override other rules or inline
   styles that might cause a flash. */
.site-footer.hidden,
body:not(.footer-visible) .site-footer {
  display: none !important;
  opacity: 0 !important;
  visibility: hidden !important;
}
.site-footer-top {
  display: grid;
  /* two equal columns each taking 50% of the footer width */
  grid-template-columns: 50% 50%;
  /* larger horizontal gutter so there's a clear gap between columns */;
  padding: 1.25rem 2rem;
  border-top: 2px solid rgba(0,0,0,0.08); /* subtle separator */
  align-items: start;
}
.site-footer-top-left {
  display: flex;
  flex-direction: column;
}
.site-footer-top-left .footer-contact,
.site-footer-top-left .footer-instagram {
  color: #ddd;
  text-decoration: none;
}
.site-footer-top-right {
  max-width: 900px;
  color: #bbb;
  font-size: 0.95rem;
  line-height: 1.4;
  text-align: left;
  align-self: start;
}

/* desktop positioning handled by the 50% grid columns above */
.site-footer-logo-wrap {
  width: 100%;
  display: block;
  align-items: center;
  justify-content: center;
  padding: 0;
  background: transparent;
  overflow: hidden;
}
.site-footer-logo {
  /* full-bleed across viewport */
  width: 100vw;
  max-width: none;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  height: auto;
  display: block;
  object-fit: cover;
}

/* Ensure the footer logo displays its native colors (black svg) */
.site-footer-logo {
  filter: none !important;
}

.site-footer-text {
  padding: 1.25rem;
  text-align: left;
}
.site-footer-contact {
  display: flex;
  flex-direction: column; /* make email and instagram stack as two rows */
  /* match the bio's typography so vertical rhythm aligns */
  font-size: 0.95rem;
  line-height: 1.45;
  align-items: flex-start;
  margin-bottom: 0.6rem;
}
.site-footer-contact .footer-contact,
.site-footer-contact .footer-instagram {
  color: #000; /* black text by default */
  text-decoration: none;
  font-weight: 700;
}
.site-footer-desc {
  color: #111;
  max-width: 1100px;
  margin: 0 auto;
  font-size: 0.95rem;
  line-height: 1.45;
  padding: 0 var(--site-gutter);
}

/* Tagline directly under the bio - match the bio's line-height and spacing */
.site-footer-tagline {
  color: inherit;
  max-width: 1100px;
  margin: 0;
  font-size: 0.95rem;
  line-height: 1.45;
  text-align: left;
}

/* Removed color-scheme specific footer rules so footer uses default light styling */

@media (max-width: 760px) {
  .site-footer-top {
    grid-template-columns: 1fr;
    text-align: center;
    gap: 0.75rem;
  }
  /* keep the contact block left-aligned on mobile while the overall block is centered */
  .site-footer-contact {
    align-items: flex-start;
    text-align: left;
  }
  .site-footer-desc {
    margin-top: 0.25rem;
  }
}

/* Hide footer when the Three.js scene is active so it doesn't overlay the canvas */
body.three-scene-active .site-footer {
  display: none !important;
  visibility: hidden !important;
  opacity: 0 !important;
}

/* Two-image spread: 12-column grid for offsets and spans */
.two-image-spread {
  display: grid;
  grid-template-columns: repeat(12, 1fr);
  gap: 1.5rem;
  align-items: start;
  margin: 2rem 0;
  box-sizing: border-box;
}

/* Break the spread out of the centered post column on wide screens so the
   grid and offsets align to the viewport instead of the article column. */
@media (min-width: 901px) {
  /* Desktop: half-and-half with offset — images approx 48vw each and nudged
     toward the edges so they meet near the center with a slight overlap. */
  .two-image-spread {
    width: 100vw;
    max-width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
  padding: 0 var(--site-gutter);
    /* keep the 12-column grid so editor offsets still work via inline gridColumn */
    grid-template-columns: repeat(12, 1fr);
    gap: 1.5rem;
  }
  .two-image-spread .two-image-side {
    padding: 0 var(--site-gutter);
  }

  /* left and right images take up ~half the viewport and are nudged outward */
  .two-image-spread .two-image-side.left .two-image {
    width: 48vw;
    max-width: 48vw;
    transform: translateX(-4vw);
    object-fit: cover;
    display: block;
  }
  .two-image-spread .two-image-side.right .two-image {
    width: 48vw;
    max-width: 48vw;
    transform: translateX(4vw);
    object-fit: cover;
    display: block;
    margin-left: auto;
  }
}

/* two-image-spread styles removed (type deprecated) */

/* Multi-image spread vertical stack: each image becomes its own full-bleed row */
.multi-image-spread.vertical-stack {
  --gutter: var(--space-xs);
  width: 100vw;
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  padding: var(--pad-top, 32px) var(--site-gutter) var(--pad-bottom, 32px);
  box-sizing: border-box;
  display: block;
}
.multi-image-spread.vertical-stack .multi-image-item {
  margin: 0 0 var(--gutter);
}
.multi-image-spread.vertical-stack .multi-image-row {
  width: 100vw;
  max-width: 100vw;
  display: block;
  margin: 0 auto;
  box-sizing: border-box;
}
.multi-image-spread.vertical-stack .multi-image-caption {
  color: #6b6b6b;
  font-size: 0.9rem;
  margin-top: 0.6rem;
  max-width: 900px;
  margin-left: calc(50% - 450px);
  margin-right: calc(50% - 450px);
}

/* Auto-columns: when there are multiple images, make an N column grid (clamped to 4) */
.multi-image-spread.auto-columns {
  display: grid;
  gap: var(--gutter);
  grid-template-columns: var(--auto-grid, repeat(3, 1fr));
  width: 100vw;
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  padding: var(--pad-top, 32px) var(--site-gutter) var(--pad-bottom, 32px);
  box-sizing: border-box;
}
.multi-image-spread.auto-columns .multi-image-item {
  margin: 0;
}
.multi-image-spread.auto-columns img {
  width: 100%;
  height: auto;
  display: block;
}

/* Spacer placeholder that preserves aspect ratio like an image would */
.multi-image-spread .multi-image-spacer {
  width: 100%;
  display: block;
  background-color: transparent;
  pointer-events: none;
}

/* Stacked captions block under an auto-columns grid */
.multi-image-captions-list {
  /* match the main post column width so captions (and their indices)
     align with other image captions in the article */
  max-width: 800px;
  margin-left: calc(50% - 400px);
  margin-right: calc(50% - 400px);
  padding: 0.5rem var(--site-gutter) 1rem;
  box-sizing: border-box;
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}
.multi-image-captions-item {
  display: flex;
  gap: 0.5rem;
  align-items: flex-start;
  color: #6b6b6b;
  font-size: 0.95rem;
  line-height: 1.25;
}
.multi-image-captions-index {
  /* fixed narrow column with right-aligned numbers so the numeric
     index lines up with the start of the caption text */
  font-weight: 400;
  color: #6b6b6b;
  min-width: 2rem;
  width: 2rem;
  display: inline-flex;
  align-items: center;
  justify-content: flex-end;
  text-align: right;
  height: auto;
  border-radius: 0;
  font-variant-numeric: tabular-nums;
  font-size: 0.95rem;
  padding-right: 0.25rem;
}
.multi-image-captions-text {
  flex: 1 1 auto;
  color: #6b6b6b;
  font-size: 0.95rem;
}

/* Normalize PortableText block spacing inside multi-image captions so
   multiple paragraphs don't show large default margins. We let the
   caption container control vertical rhythm. */
.multi-image-captions-text :where(p, h1, h2, h3, h4, ul, ol, blockquote) {
  margin: 0;
  line-height: 1.25;
}
.multi-image-captions-text :where(p + p, p + ul, p + ol) {
  margin-top: 0.125rem; /* tighter gap between successive blocks */
}

/* Minimal carousel styles used by the new `carousel` block in PortableText */
.post-carousel {
  display: flex;
  overflow-x: auto;
  scroll-snap-type: x mandatory;
  -webkit-overflow-scrolling: touch;
  gap: 1rem;
  padding: 1rem var(--site-gutter);
}
.post-carousel-slide {
  flex: 0 0 86%; /* slightly inset so next slide peeks */
  position: relative;
  width: 100%;
  height: 56vh; /* desktop default */
  align-items: center;

/* Reduce carousel height on smaller viewports so more of the side images are visible */
@media (max-width: 1024px) {
  .post-carousel-3d { height: 44vh; }
}
@media (max-width: 640px) {
  /* smaller mobile height to show more of the left/right slides */
  .post-carousel-3d { height: 18vh; }
}
@media (max-width: 420px) {
  /* very small screens (narrow phones) */
  .post-carousel-3d { height: 16vh; }
}
}
.post-carousel-image {
  width: 100%;
  height: auto;
  display: block;
  border-radius: 0;
}

/* 3D Carousel container and progress UI */
.post-carousel-wrap {
  /* make the carousel full-bleed like other fullwidth figures but keep
     the visible content inset by the site gutter */
  width: 100vw;
  max-width: 100vw;
  margin-left: calc(50% - 50vw);
  margin-right: calc(50% - 50vw);
  box-sizing: border-box;
  /* no side padding: carousel should be full-bleed; spacing between slides
    is handled by the track gap calculated in JS */
  padding-left: 0;
  padding-right: 0;
  position: relative;
  overflow: hidden;
}
.post-carousel-progress {
  display: flex;
  gap: 0.5rem;
  padding: 0.5rem var(--site-gutter);
  justify-content: center;
}
.post-carousel-progress-item {
  flex: 1 1 auto;
  height: 4px;
  background: rgba(255,255,255,0.12);
  overflow: hidden;
  border-radius: 2px;
}
.post-carousel-progress-bar {
  display: block;
  height: 100%;
  width: 0%;
  background: #fff;
}

/* CSS 3D carousel visuals */
.post-carousel-3d {
  position: relative;
  width: 100%;
  height: 56vh;
  overflow: hidden;
}

.post-carousel-track {
  display: flex;
  align-items: center;
  height: 100%;
  /* no padding here either; JS controls visual centering and gap */
  padding-left: 0;
  padding-right: 0;
}
.post-carousel-slide-3d {
  /* slide box used by the simple track layout */
  box-sizing: border-box;
}
.post-carousel-track {
  width: 100%;
  height: 100%;
}
.post-carousel-slide-3d {
  /* use site background so letterboxing matches the page */
  background: var(--background);
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 0; /* allow flex children to shrink properly */
  overflow: hidden;
  margin: 0;
}
/* Embla variable-width helpers: let slides size to their content, not a fixed percent */
.embla__container {
  display: flex;
  gap: 0; /* ensure no gap between slides */
  align-items: center;
}
.embla__slide {
  /* important: allow natural image width to determine slide width */
  flex: 0 0 auto;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 0; /* ensure slides sit flush */
}
.embla__slide__img {
  height: 100%;
  width: auto;
  display: block;
}
/* Mobile: slightly reduce center image size so side slides peek into view */
@media (max-width: 640px) {
  .embla__slide__img {
    /* constrain images so adjacent slides can peek into view */
    max-width: 82vw;
    height: auto;
  }
  .post-carousel-3d {
    height: 28vh;
  }
  /* no margin between slides on mobile either */
  .embla__slide { margin: 0; }
  .embla__slide.post-carousel-slide-3d.is-prev img,
  .embla__slide.post-carousel-slide-3d.is-next img { max-width: 70vw; }
}
.post-carousel-slide-3d img,
.post-carousel-image {
  /* size by height and contain so images fill vertical space without cropping */
  height: 100%;
  width: auto;
  object-fit: contain;
  display: block;
}
.post-carousel-controls {
  position: absolute;
  left: 0;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  display: flex;
  justify-content: space-between;
  pointer-events: none;
}
.post-carousel-controls button {
  pointer-events: auto;
  background: rgba(0,0,0,0.5);
  color: #fff;
  border: none;
  width: 44px;
  height: 44px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 22px;
}

/* Use same PNG cursor for the control buttons as well */
.post-carousel-prev {
  /* prefer a small 48x48 PNG (more likely to be accepted by browsers); fall back to existing PNG/SVG */
  cursor: url('/cursors/left-48.png') 24 24, url('/cursors/left.png') 24 24, url('/cursors/left.svg?v=2') 24 24, w-resize !important;
}
.post-carousel-next {
  /* prefer a small 48x48 PNG (more likely to be accepted by browsers); fall back to existing PNG/SVG */
  cursor: url('/cursors/right-48.png') 24 24, url('/cursors/right.png') 24 24, url('/cursors/right.svg?v=2') 24 24, e-resize !important;
}
.post-carousel-controls button,
.post-carousel-prev,
.post-carousel-next {
  /* ensure the button text/characters use the red color */
  color: #ff0000 !important;
}

/* Target any inline SVGs inside the prev/next buttons and force red fill/stroke */
.post-carousel-controls button svg,
.post-carousel-prev svg,
.post-carousel-next svg {
  width: 24px;
  height: 24px;
  fill: #ff0000 !important;
  stroke: #ff0000 !important;
  color: #ff0000 !important;
}

/* Also target images inside controls, if SVGs are rendered as <img src="..."> */
.post-carousel-controls button img,
.post-carousel-prev img,
.post-carousel-next img {
  filter: none !important;
  /* as a fallback, tint via CSS if the image is an SVG respecting currentColor */
  color: #ff0000 !important;
}

/* Also apply cursor to the slide container itself so hovering the side area shows the arrows */
.post-carousel-slide-3d.is-prev,
.post-carousel-slide-3d.is-prev img {
  cursor: url('/cursors/left.png') 24 24, url('/cursors/left.svg?v=2') 24 24, w-resize !important;
}
.post-carousel-slide-3d.is-next,
.post-carousel-slide-3d.is-next img {
  cursor: url('/cursors/right.png') 24 24, url('/cursors/right.svg?v=2') 24 24, e-resize !important;
}






@media (max-width: 900px) {
  /* On small screens, remove the large pad-top/pad-bottom coming from the
     desktop fallback (var(--pad-top) / var(--pad-bottom)). Keep images
     full-bleed horizontally but use 1.5rem vertical rhythm like inline images. */
  .multi-image-spread.vertical-stack,
  .multi-image-spread.auto-columns,
  .multi-image-spread.stack-on-mobile {
    /* remove the desktop padding values that introduce large gaps */
    padding-top: 0;
    padding-bottom: 0;
    /* preserve full-bleed horizontal offset, but remove inner horizontal padding */
    padding-left: 0;
    padding-right: 0;
    box-sizing: border-box;
    /* use the same vertical rhythm as inline images */
    margin-top: 1.5rem;
    margin-bottom: 1.5rem;
  }
  .multi-image-spread.vertical-stack .multi-image-row {
    width: 100vw;
    margin-left: calc(50% - 50vw);
    margin-right: calc(50% - 50vw);
  }
  .multi-image-spread.auto-columns {
    grid-template-columns: 1fr !important;
    /* ensure the single-column grid still uses full-bleed offsets defined
       by the base rules (margin-left/right calc preserved) */
  }
  .multi-image-captions-list {
   max-width: 100%;
   margin-left: var(--site-gutter);
   margin-right: var(--site-gutter);
   padding: 0.5rem 0 1rem;
   /* Ensure the index column still aligns visually on mobile by reducing
     the left padding so numbers sit near the caption text */
   padding-left: 0;
  }
}


/* When the spread stacks on mobile make it full-bleed and offset the images
   so they appear staggered (left image shifts left, right image shifts right).
   This mirrors the reference where stacked images touch opposite edges. */
@media (max-width: 900px) {
  /* two-image spread styles removed */
}

